name: Create Passwall Self-Extracting Package

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Clone makeself repository
        run: git clone https://github.com/megastep/makeself.git

      - name: Download latest Passwall files
        run: |
          mkdir -p downloads
          cd downloads
          curl -LO $(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest | grep -oP '"browser_download_url":\s*".*passwall_packages_ipk_x86_64.zip"' | cut -d '"' -f 4)
          curl -LO $(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest | grep -oP '"browser_download_url":\s*".*luci-19.07.*\.ipk"' | head -1 | cut -d '"' -f 4)
          curl -LO $(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest | grep -oP '"browser_download_url":\s*".*luci-19.07.*\.ipk"' | tail -1 | cut -d '"' -f 4)

      - name: Organize files
        run: |
          mkdir -p passwall/depends passwall/main
          unzip downloads/passwall_packages_ipk_x86_64.zip -d passwall/depends
          rm downloads/passwall_packages_ipk_x86_64.zip
          mv downloads/luci-19.07*.ipk passwall/main/

      - name: Create install.sh script
        run: |
          cat <<EOF > passwall/install.sh
          #!/bin/sh
          opkg update
          if [ $? -ne 0 ]; then
              echo "update failedã€‚"
              exit 1
          fi
          opkg install depends/*.ipk
          opkg install main/*.ipk
          EOF
          chmod +x passwall/install.sh

      - name: Move passwall to makeself directory
        run: mv passwall makeself/

      - name: Create self-extracting package
        run: |
          cd makeself
          ./makeself.sh passwall/ passwall.run "by github action" ./install.sh

      - name: Check file size
        run: |
            ls -lh makeself/passwall.run
      
      - name: Preparing release name
        run: |
          release_name=$(TZ="Asia/Shanghai" date +'%Y-%m-%d %H:%M Build')
          echo "RELEASE_NAME=$release_name" >> $GITHUB_ENV

      - name: Fetch latest release details
        id: fetch_release_details
        run: |
          release_notes=$(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest | jq -r '.body')  
          if [ -z "$release_notes" ]; then
            release_notes="No release notes available."
          fi
          echo "$release_notes" > release_notes.txt
          echo "RELEASE_NOTES_FILE=release_notes.txt" >> $GITHUB_ENV
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@master
        with:
          tag_name: RunFilesBuilder
          name: ${{ env.RELEASE_NAME }}
          body: |
            ![GitHub Release](https://img.shields.io/github/v/release/wukongdaily/ActionDemo?style=for-the-badge&logoSize=amg&labelColor=%23FFBF00&color=%2300C598)
            > Automatically generated release run Files
            ### How to use? For example
            `sh passwall.run `
            ### Release Notes
            $(cat release_notes.txt)
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Upload run files as release assets
        uses: softprops/action-gh-release@v2.1.0
        with:
          tag_name: RunFilesBuilder
          files: ${{ github.workspace }}/makeself/*.run
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
